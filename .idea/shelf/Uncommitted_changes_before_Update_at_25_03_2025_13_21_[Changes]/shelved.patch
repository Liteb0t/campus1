Index: master/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path, include\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\r\n    path(\"deleted_account\", views.deleted_account, name=\"deleted_account\"),\r\n    path(\"\", views.homepage, name=\"homepage\"),\r\n    path(\"profile\", views.profile, name=\"profile\"),\r\n    path(\"MakeSubmission\", views.makesubmissionpage, name=\"makesubmission\"),\r\n    path(\"recruiter_profile\", views.recruiter_profile, name=\"recruiter_profile\"),\r\n    path(\"user_profile\", views.user_profile, name=\"user_profile\"),\r\n    path(\"access_db_admin\", views.access_db_admin, name=\"access_db_admin\"),\r\n    path(\"api/students/\", views.studentList, name=\"studentList\"),\r\n    path(\"api/users/\", views.currentUser, name=\"userList\"),\r\n    path(\"api/submissions/\", views.submissionList, name=\"submissionList\"),\r\n    path(\"api/jobs/\", views.jobList, name=\"jobList\"),\r\n    path(\"api/lineManagers/\", views.lineManagerList, name=\"lineManagerList\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/master/urls.py b/master/urls.py
--- a/master/urls.py	(revision aea728b1bbd21e77d945aa2660ec32032a4ed8ff)
+++ b/master/urls.py	(date 1742907407966)
@@ -10,9 +10,11 @@
     path("recruiter_profile", views.recruiter_profile, name="recruiter_profile"),
     path("user_profile", views.user_profile, name="user_profile"),
     path("access_db_admin", views.access_db_admin, name="access_db_admin"),
+    path("access_student_submission", views.access_student_submission, name="access_student_submission"),
     path("api/students/", views.studentList, name="studentList"),
     path("api/users/", views.currentUser, name="userList"),
     path("api/submissions/", views.submissionList, name="submissionList"),
+    path("api/submissionsStudent/", views.submissionListStudent, name="submissionListStudent"),
     path("api/jobs/", views.jobList, name="jobList"),
     path("api/lineManagers/", views.lineManagerList, name="lineManagerList"),
 ]
Index: master/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\nfrom django.http import JsonResponse\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.models import User\r\nfrom master.models import Job, LineManager, Submission, Student, Recruiter\r\nfrom master.serialisers import DBAdminStudentSerialiser, DBAdminSubmissionSerialiser, DBAdminJobSerialiser, DBAdminLineManagerSerialiser, UserSerialiser\r\nfrom master.forms import StudentCreationForm, StudentUpdateForm, UserCreationForm\r\n# from django.db.models import Q # for complex search lookups\r\n# from django.template import loader\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom rest_framework.parsers import JSONParser\r\nfrom django.core.paginator import Paginator\r\nfrom django.shortcuts import redirect\r\nimport json\r\n\r\n@login_required\r\ndef homepage(request):\r\n    if request.user.is_superuser == 1:\r\n        return render(request, \"homepage.html\")\r\n    else:\r\n        return redirect(\"profile\")\r\n\r\ndef logged_out(request):\r\n    return render(request, \"registration/logged_out.html\")\r\n\r\ndef deleted_account(request):\r\n    return render(request, \"registration/deleted_account.html\")\r\n\r\n@login_required\r\ndef profile(request):\r\n    return render(request, \"homepage.html\")\r\n\r\n@login_required\r\ndef recruiter_profile(request):\r\n    return render(request, \"recruiter_profile.html\")\r\n\r\n@login_required\r\ndef user_profile(request):\r\n    Users_JSON = UserSerialiser(User.objects.all(), many = True).data\r\n    return render(request, \"user_profile.html\", { \"UsersJSON\": json.dumps(Users_JSON)})\r\n\r\n@login_required\r\ndef makesubmissionpage(request):\r\n    student_id = Student.objects.get(user__id=request.user.id).id\r\n    jobs = Job.objects.all()\r\n    line_managers = LineManager.objects.all()\r\n    return render(request, \"MakeSubmission.html\", {\"StudentID\": student_id, \"Jobs\": jobs, \"Managers\": line_managers})\r\n\r\n@login_required\r\ndef access_db_admin(request):\r\n    return render(request, \"db_view/access_db_admin.html\")\r\n\r\n# JSON API: does not return html but JSON instead. used by the new admin page.\r\n# We need to make this secure later.\r\n@csrf_exempt\r\ndef studentList(request):\r\n    if request.method == \"GET\":\r\n        students = Student.objects.select_related(\"user\")\r\n        students_serialiser = DBAdminStudentSerialiser(students, many=True)\r\n        return JsonResponse(students_serialiser.data, safe=False)\r\n\r\n    elif request.method == \"POST\":\r\n        data = JSONParser().parse(request)\r\n        serialiser = DBAdminStudentSerialiser(data=data)\r\n        if data[\"_action\"] == \"deleteMultiple\":\r\n            for entry_id in data[\"to_delete\"]:\r\n                instance = Student.objects.get(id=entry_id)\r\n                instance.delete()\r\n            return JsonResponse(data={\"message\": \"Deleted stuff\"}, status=200)\r\n        elif serialiser.is_valid(raise_exception=ValueError):\r\n            if data[\"_action\"] == \"create\":\r\n                serialiser.create(validated_data=data)\r\n            elif data[\"_action\"] == \"update\":\r\n                # instance = Student.objects.get(user=User.objects.get(id=data[\"_id\"]))\r\n                instance = Student.objects.get(id=data[\"_id\"])\r\n                serialiser.update(instance=instance, validated_data=data)\r\n            # elif data[\"_action\"] == \"deleteMultiple\":\r\n            #     for entry_id in data[\"to_delete\"]:\r\n            #         instance = Student.objects.get(id=entry_id)\r\n            #         serialiser.delete(instance=instance)\r\n            return JsonResponse(serialiser.data, status=201)\r\n        else:\r\n            return JsonResponse(serialiser.errors, status=400)\r\n\r\n# investigate why submissions take much longer to load than the rest\r\n@csrf_exempt\r\ndef submissionList(request):\r\n    if request.method == \"GET\":\r\n        submissions = Submission.objects.select_related(\"student\", \"job\", \"line_manager\")\r\n        submissions_serialiser = DBAdminSubmissionSerialiser(submissions, many=True)\r\n        return JsonResponse(submissions_serialiser.data, safe=False)\r\n\r\n    elif request.method == \"POST\":\r\n        data = JSONParser().parse(request)\r\n        if data[\"_action\"] == \"deleteMultiple\":\r\n            for entry_id in data[\"to_delete\"]:\r\n                instance = Submission.objects.get(id=entry_id)\r\n                instance.delete()\r\n            return JsonResponse(data={\"message\": \"Deleted stuff\"}, status=200)\r\n        if data[\"_action\"] == \"create\":\r\n            serialiser = DBAdminSubmissionSerialiser(data=data)\r\n            if serialiser.is_valid(raise_exception=ValueError):\r\n                serialiser.create(validated_data=data)\r\n                return JsonResponse(serialiser.data, status=201)\r\n        elif data[\"_action\"] == \"update\":\r\n            instance = Submission.objects.get(id=data[\"_id\"])\r\n            print(data)\r\n            # if data[\"student\"][\"id\"] != instance.student.id:\r\n            # data[\"student\"] = Student.objects.get(id=data[\"student\"][\"id\"]).__dict__\r\n            # data[\"student\"] = data[\"student\"][\"id\"]\r\n            print(data)\r\n            serialiser = DBAdminSubmissionSerialiser(data=data)\r\n            if serialiser.is_valid(raise_exception=ValueError):\r\n                serialiser.update(instance=instance, validated_data=data)\r\n                return JsonResponse(serialiser.data, status=201)\r\n            else:\r\n                return JsonResponse(serialiser.errors, status=400)\r\n        else:\r\n            return JsonResponse(serialiser.errors, status=400)\r\n@csrf_exempt\r\ndef jobList(request):\r\n    if request.method == \"GET\":\r\n        jobs = Job.objects.all()\r\n        jobs_serialiser = DBAdminJobSerialiser(jobs, many=True)\r\n        return JsonResponse(jobs_serialiser.data, safe=False)\r\n\r\n    elif request.method == \"POST\":\r\n        data = JSONParser().parse(request)\r\n        serialiser = DBAdminJobSerialiser(data=data)\r\n        if data[\"_action\"] == \"deleteMultiple\":\r\n            for entry_id in data[\"to_delete\"]:\r\n                instance = Job.objects.get(id=entry_id)\r\n                instance.delete()\r\n            return JsonResponse(data={\"message\": \"Deleted stuff\"}, status=200)\r\n        elif serialiser.is_valid(raise_exception=ValueError):\r\n            if data[\"_action\"] == \"create\":\r\n                serialiser.create(validated_data=data)\r\n            elif data[\"_action\"] == \"update\":\r\n                instance = Job.objects.get(id=data[\"_id\"])\r\n                serialiser.update(instance=instance, validated_data=data)\r\n            return JsonResponse(serialiser.data, status=201)\r\n        else:\r\n            return JsonResponse(serialiser.errors, status=400)\r\n@csrf_exempt\r\ndef lineManagerList(request):\r\n    if request.method == \"GET\":\r\n        linemanagers = LineManager.objects.all()\r\n        linemanagers_serialiser = DBAdminLineManagerSerialiser(linemanagers, many=True)\r\n        return JsonResponse(linemanagers_serialiser.data, safe=False)\r\n\r\n@csrf_exempt\r\ndef currentUser(request):\r\n    if request.method == \"GET\":\r\n        users = [request.user]\r\n        users_serialiser = UserSerialiser(users, many=True)\r\n        return JsonResponse(users_serialiser.data, safe=False)\r\n    elif request.method == \"POST\":\r\n        data = JSONParser().parse(request)\r\n        serialiser = UserSerialiser(data=data)\r\n        if serialiser.is_valid(raise_exception=ValueError):\r\n            if data[\"_action\"] == \"create\":\r\n                serialiser.create(validated_data=data)\r\n            elif data[\"_action\"] == \"update\":\r\n                # instance = Student.objects.get(user=User.objects.get(id=data[\"_id\"]))\r\n                instance = User.objects.get(id=data[\"_id\"])\r\n                serialiser.update(instance=instance, validated_data=data)\r\n            elif data[\"_action\"] == \"delete\":\r\n                    serialiser.delete(instance=User.objects.get(id=data[\"_id\"]))\r\n            return JsonResponse(serialiser.data, status=201)\r\n        else:\r\n            return JsonResponse(serialiser.errors, status=400)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/master/views.py b/master/views.py
--- a/master/views.py	(revision aea728b1bbd21e77d945aa2660ec32032a4ed8ff)
+++ b/master/views.py	(date 1742907582680)
@@ -50,6 +50,9 @@
 def access_db_admin(request):
     return render(request, "db_view/access_db_admin.html")
 
+def access_student_submission(request):
+    return render(request, "db_view/access_student_submission.html")
+
 # JSON API: does not return html but JSON instead. used by the new admin page.
 # We need to make this secure later.
 @csrf_exempt
@@ -89,7 +92,6 @@
         submissions = Submission.objects.select_related("student", "job", "line_manager")
         submissions_serialiser = DBAdminSubmissionSerialiser(submissions, many=True)
         return JsonResponse(submissions_serialiser.data, safe=False)
-
     elif request.method == "POST":
         data = JSONParser().parse(request)
         if data["_action"] == "deleteMultiple":
@@ -117,6 +119,14 @@
                 return JsonResponse(serialiser.errors, status=400)
         else:
             return JsonResponse(serialiser.errors, status=400)
+
+@csrf_exempt
+def submissionListStudent(request):
+    if request.method == "GET":
+        submissions = Submission.objects.filter(student__user__id = request.user.id).select_related("student", "job", "line_manager")
+        submissions_serialiser = DBAdminSubmissionSerialiser(submissions, many=True)
+        return JsonResponse(submissions_serialiser.data, safe=False)
+
 @csrf_exempt
 def jobList(request):
     if request.method == "GET":
Index: master/templates/db_view/access_student_submission.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/master/templates/db_view/access_student_submission.html b/master/templates/db_view/access_student_submission.html
new file mode 100644
--- /dev/null	(date 1742907407944)
+++ b/master/templates/db_view/access_student_submission.html	(date 1742907407944)
@@ -0,0 +1,37 @@
+{% extends "_base.html" %}
+{% load static %}
+{% block title %}
+ View Tables
+{% endblock %}
+
+{% block content %}
+
+    <div id="submissions-table-container"></div>
+
+    <script src="{% static 'table.js' %}"></script>
+    <script>
+	"use strict";
+    let entries_per_page = 50;
+
+	const submissions_table = new AdvancedSearchTable("submissions-table-container", {
+		json_url: "{% url 'submissionListStudent' %}"
+		,columns: {
+			// "student id": {name: "id", type: "number", "parent_object": ["student"]},
+			// "job id": {name: "id", type: "number", "parent_object": ["job"]},
+			// "line manager id": {name: "id", type: "number", "parent_object": ["line_manager"]},
+			// ,"Student": {name: "username", type: "string", "parent_object": ["student", "user"]}
+			// ,"Job": {name: "job_name", type: "string", parent_object: ["job"]}
+			// ,"Line Manager": {name: "username", type: "string", "parent_object": ["line_manager", "user"]}
+			"student id": {name: "student", type: "number"},
+			"job id": {name: "job", type: "number"},
+			"line manager id": {name: "line_manager", type: "number"},
+			"Hours": {name: "hours", type: "number"},
+			"Date worked": {name: "date_worked", type: "date"},
+			"Date submitted": {name: "date_submitted", type: "date"},
+			"Accepted": {name: "accepted", type: "boolean"}
+        }
+        ,editable: true
+	});
+
+    </script>
+{% endblock %}
